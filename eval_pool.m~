function outputs = eval_pool(net, imdb)

if strcmp(net.device, 'cpu')
    net.move('gpu');
end

net.conserveMemory = 0;
nsamp = 1;
outputs = [];
opts.train = [] ;
if isempty(opts.train), opts.train = find(imdb.images.set==1) ; end


while nsamp <= size(opts.train, 2)
    step = min(256, size(opts.train, 2) - nsamp+1);
    
    batch = nsamp:nsamp+step-1;
    
    
images = strcat([imdb.imageDir filesep], imdb.images.name(batch)) ;
im = cnn_imagenet_get_batch(images, opts, ...
                              'prefetch', nargout == 0, ...
                              'transformation', 'none') ;
im = gpuArray(im) ;
inputs = {'data', im, 'label', labels} ;
    
    images = gpuArray(imdb.images.data(:, :, :, nsamp:nsamp+step-1));
    inputs = {'image', images};
    net.eval(inputs) ;
    nsamp = nsamp + step;
    
    % Gather results.
    index = strfind({net.layers.name}, 'pool_final');
    index = find(not(cellfun('isempty', index)));
    
    % Concat results.
    x = squeeze(gather(net.vars(net.layers(index(1)).outputIndexes(1)).value));
    outputs = cat(2, outputs, x);
end

if strcmp(net.device, 'gpu')
    net.move('cpu');
end

% -------------------------------------------------------------------------
function inputs = getDagNNBatch(opts, useGpu, imdb, batch)
% -------------------------------------------------------------------------
images = strcat([imdb.imageDir filesep], imdb.images.name(batch)) ;
isVal = ~isempty(batch) && imdb.images.set(batch(1)) ~= 1 ;

if ~isVal
  % training
  im = cnn_imagenet_get_batch(images, opts, ...
                              'prefetch', nargout == 0) ;
else
  % validation: disable data augmentation
  im = cnn_imagenet_get_batch(images, opts, ...
                              'prefetch', nargout == 0, ...
                              'transformation', 'none') ;
end

if nargout > 0
  if useGpu
    im = gpuArray(im) ;
  end
  labels = imdb.images.label(batch) ;
  inputs = {'data', im, 'label', labels} ;
end
